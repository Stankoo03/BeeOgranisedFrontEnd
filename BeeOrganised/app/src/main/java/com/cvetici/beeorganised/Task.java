package com.cvetici.beeorganised;

import java.util.ArrayList;

public class Task
{
    protected String title;
    //protected String desc;
    protected Interval time;

    public String GetTitle() {
        return title;
    };
    public Interval GetTime() {
        return time;
    };

    public void SetNewTime(Interval time) {
        this.time = time;
    };
    //TODO other setters and getters...

    public Interval Intersect(Task other){
        return time.Intersect(other.time);
    }

    public ArrayList<Interval> UsedTime(Interval period){
        Interval i = time.Intersect(period);
        ArrayList<Interval> R = new ArrayList<Interval>();
        if(i!=null){
            i.SetRefferedTask(this);
            R.add(i);
        }
        return R;
    }

    public int GetPriority(){
        return 1;
    }

    public int ComparePriority(Task other){
        return GetPriority() - other.GetPriority();
    }

    public Task(){
        this.title = "New Task";
        //this.desc = "Generic Task Generated By An Empty Constructor";
        this.time = new Interval();
    }

    public Task(String title, Interval time){
        this.title = title;
        //this.desc = desc;
        this.time = time;
    }

    public String ToString()
    {
        return title + " " + time.ToString();
    }

    public String ToStringTime()
    {
        return time.ToStringTime();
    }
}

class AiTask extends Task
{
    protected int priority; //1-4
    protected Interval prefferedTime;

    @Override
    public int GetPriority(){
        return priority;
    }

    public void SetPriority(int p){
        if(p<1) priority = 1;
        else if(p>4) priority = 4;
        else priority = p;
    }

    public AiTask(String title, Interval time, int priority, Interval prefferedTime){
        super(title,time);
        SetPriority(priority);
        this.prefferedTime = prefferedTime;
    }
}

class Routine extends Task
{
    protected boolean[] repeatDays;

    public Routine(){
        this.title = "New Routine";
        //this.desc = "Generic Routine Generated By An Empty Constructor";
        this.time = new Interval();
        repeatDays = new boolean[7];
    }

    public Routine(String title,  Interval time, boolean[] repeatDays){
        this.title = title;
        //this.desc = desc;
        this.time = time;
        this.repeatDays = repeatDays;
    }

    protected boolean isDateUsed(DateTime date) { return repeatDays[date.GetDayInWeek()]; }

    @Override
    public ArrayList<Interval> UsedTime(Interval period){
        ArrayList<Interval> r = new ArrayList<>();
        TimeSpan span = period.GetDuration();
        int days = span.GetDay() + 2;
        Interval potential = new Interval(new DateTime(period.GetStartTime(),time.GetStartTime()), time.GetDuration());

        while(potential.GetEndTime().Before(period.GetEndTime().AddDur(new TimeSpan(1,0,0)))){

            if( isDateUsed(potential.GetStartTime()) ) {
                Interval i = period.Intersect(potential);
                if (i != null) {
                    i.SetRefferedTask(this);
                    r.add(i);
                }
            }
            potential.MoveByOffset(new TimeSpan(1,0,0));
        }

        return r;
    }



}

class AdvancedRoutine extends Routine{
    protected int repeatWeeks; //Every 2nd, every 3rd week etc.
    protected int weekOffset; // between 0 and (repeatWeeks-1)

    public AdvancedRoutine(){
        this.title = "New AdvancedRoutine";
        //this.desc = "Generic AdvancedRoutine Generated By An Empty Constructor";
        this.time = new Interval();
        this.repeatDays = new boolean[7];
        this.repeatWeeks = 2;
        this.weekOffset = 0;
    }

    public AdvancedRoutine(String title, Interval time, boolean[] repeatDays, int repeatWeeks, int weekOffset){
        this.title = title;
        //this.desc = desc;
        this.time = time;
        this.repeatDays = repeatDays;
        this.repeatWeeks = repeatWeeks;
        this.weekOffset = weekOffset;
    }

    @Override
    protected boolean isDateUsed(DateTime date) {
        if((date.GetWeekID()+weekOffset) % repeatWeeks == 0){
            if(repeatDays[date.GetDayInWeek()]){
                return true;
            }
        }
        return false;
    }

}
